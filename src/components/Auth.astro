---
import { supabase } from '../lib/supabase';

const { redirect } = Astro;

// Verificar si hay una sesión activa
const { data: { session } } = await supabase.auth.getSession();

// Si hay sesión y estamos en la página de login, redirigir al home
if (session && Astro.url.pathname === '/login') {
  const redirectTo = Astro.url.searchParams.get('redirectedFrom') || '/';
  return redirect(redirectTo);
}

// Si no hay sesión y estamos en una ruta protegida, redirigir a login
const protectedRoutes = ['/perfil', '/foro'];
const isProtectedRoute = protectedRoutes.some(route => 
  Astro.url.pathname.startsWith(route)
);

if (!session && isProtectedRoute) {
  const redirectUrl = new URL('/login', Astro.url.origin);
  redirectUrl.searchParams.set('redirectedFrom', Astro.url.pathname);
  return redirect(redirectUrl.toString());
}

// Función para manejar el login
async function handleLogin(event) {
  event.preventDefault();
  
  const formData = new FormData(event.target);
  const email = formData.get('email');
  const password = formData.get('password');
  
  try {
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    if (error) throw error;
    
    // Redirigir a la página de origen o a la página principal
    const redirectTo = new URLSearchParams(window.location.search).get('redirectedFrom') || '/';
    window.location.href = redirectTo;
  } catch (error) {
    console.error('Error al iniciar sesión:', error.message);
    // Mostrar mensaje de error al usuario
    const errorElement = document.getElementById('login-error');
    if (errorElement) {
      errorElement.textContent = 'Error al iniciar sesión. Verifica tus credenciales.';
      errorElement.classList.remove('hidden');
    }
  }
}
---

{/* Componente de login */}
{Astro.url.pathname === '/login' && (
  <div class="min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <div>
        <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">
          Iniciar sesión
        </h2>
      </div>
      
      <div id="login-error" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
        <span class="block sm:inline">Error al iniciar sesión. Verifica tus credenciales.</span>
      </div>
      
      <form class="mt-8 space-y-6" on:submit={handleLogin}>
        <input type="hidden" name="remember" value="true" />
        <div class="rounded-md shadow-sm -space-y-px">
          <div>
            <label for="email-address" class="sr-only">Correo electrónico</label>
            <input
              id="email-address"
              name="email"
              type="email"
              autocomplete="email"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-t-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
              placeholder="Correo electrónico"
            />
          </div>
          <div>
            <label for="password" class="sr-only">Contraseña</label>
            <input
              id="password"
              name="password"
              type="password"
              autocomplete="current-password"
              required
              class="appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 placeholder-gray-500 text-gray-900 rounded-b-md focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 focus:z-10 sm:text-sm"
              placeholder="Contraseña"
            />
          </div>
        </div>

        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input
              id="remember-me"
              name="remember-me"
              type="checkbox"
              class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
            />
            <label for="remember-me" class="ml-2 block text-sm text-gray-900">
              Recordarme
            </label>
          </div>

          <div class="text-sm">
            <a href="/recuperar-contrasena" class="font-medium text-indigo-600 hover:text-indigo-500">
              ¿Olvidaste tu contraseña?
            </a>
          </div>
        </div>

        <div>
          <button
            type="submit"
            class="group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Iniciar sesión
          </button>
        </div>
      </form>
      
      <div class="text-center">
        <p class="text-sm text-gray-600">
          ¿No tienes una cuenta?{' '}
          <a href="/registro" class="font-medium text-indigo-600 hover:text-indigo-500">
            Regístrate
          </a>
        </p>
      </div>
    </div>
  </div>
)}

{/* Componente de logout */}
{false && (
  <button
    class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
    onclick={async () => {
      await supabase.auth.signOut();
      window.location.href = '/';
    }}
  >
    Cerrar sesión
  </button>
)}

<script>
// Asegurarse de que el código del cliente solo se ejecute en el navegador
if (import.meta.env.SSR === false) {
  // Escuchar cambios en la autenticación
  const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'SIGNED_IN') {
      // Actualizar las cookies al iniciar sesión
      document.cookie = `sb-access-token=${session.access_token}; path=/; max-age=604800; samesite=lax`;
      document.cookie = `sb-refresh-token=${session.refresh_token}; path=/; max-age=604800; samesite=lax; httponly`;
    } else if (event === 'SIGNED_OUT') {
      // Limpiar cookies al cerrar sesión
      document.cookie = 'sb-access-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
      document.cookie = 'sb-refresh-token=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
    }
  });
  
  // Limpiar la suscripción cuando el componente se desmonte
  window.addEventListener('unload', () => {
    subscription?.unsubscribe();
  });
}
</script>
